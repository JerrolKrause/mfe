const fs = require('fs');

/**
 * Retrieves the default fields for a given type from the schema.
 *
 * @param {object} schema - The introspection schema object.
 * @param {string} typeName - The name of the type to retrieve fields for.
 * @returns {string} - A string containing the fields for the specified type.
 */
const getTypeFields = (schema, typeName) => {
  const type = schema.__schema.types.find((type) => type.name === typeName);
  if (!type || !type.fields) return '';

  return type.fields.map((field) => field.name).join('\n          ');
};

/**
 * Converts the operation name to a format where the model name is first.
 *
 * @param {string} operationName - The original operation name.
 * @param {string} type - The type of the operation (Query or Mutation).
 * @returns {string} - The formatted operation name.
 */
const formatOperationName = (operationName, type) => {
  const words = operationName.split(/(?=[A-Z])/).reverse();
  if (words.length > 1) {
    return (
      words
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join('') + type
    );
  }

  return `${
    operationName.charAt(0).toUpperCase() + operationName.slice(1)
  }${type}`;
};

/**
 * Generates a TypeScript file with GraphQL queries and mutations based on the introspection schema.
 *
 * @param {object} schema - The introspection schema object.
 * @param {string} outputPath - The path where the generated TypeScript file should be saved.
 *
 * @example
 * const schema = require('./libs/models/src/introspection-result.json');
 * generateQueriesAndMutations(schema, 'src/graphql');
 */
const generateQueriesAndMutations = (schema, outputPath) => {
  const queryType = schema.__schema.types.find((type) => type.name === 'Query');
  const mutationType = schema.__schema.types.find(
    (type) => type.name === 'Mutation'
  );

  const queries = queryType ? queryType.fields : [];
  const mutations = mutationType ? mutationType.fields : [];

  let content = `// DO NOT EDIT THIS FILE, IT IS AUTO-GENERATED
import { gql } from 'apollo-angular';
// eslint-disable-next-line @typescript-eslint/prefer-namespace-keyword, @typescript-eslint/no-namespace
export module GraphQL {\n`;

  queries.forEach((query) => {
    const fields = getTypeFields(schema, query.type.name);
    const operationName = formatOperationName(query.name, 'Query');
    content += `  export const ${operationName} = gql\`
    query ${query.name} {
      ${query.name} {
        ${fields}
      }
    }
  \`;\n\n`;
  });

  mutations.forEach((mutation) => {
    const fields = getTypeFields(schema, mutation.type.name);
    const operationName = formatOperationName(mutation.name, 'Mutation');
    content += `  export const ${operationName} = gql\`
    mutation ${mutation.name} {
      ${mutation.name} {
        ${fields}
      }
    }
  \`;\n\n`;
  });

  content += '}\n';

  fs.mkdirSync(outputPath, { recursive: true });
  fs.writeFileSync(`${outputPath}/global.graphql.ts`, content);
};

/**
 * Plugin function to generate a TypeScript file for GraphQL queries and mutations.
 *
 * @param {object} schema - The GraphQL schema object.
 * @param {object[]} documents - The GraphQL documents.
 * @param {object} config - The plugin configuration.
 * @returns {string} - The content generated by the plugin.
 */
module.exports = {
  plugin: (schema, documents, config) => {
    generateQueriesAndMutations(config.schema, 'libs/models/src/lib/');
    return ''; // Return an empty string or any other content if needed
  },
};
